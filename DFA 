{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN+/DD6grI9SaiT7Xgx5skZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lm-moraes/teste1/blob/main/DFA%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.stats import linregress"
      ],
      "metadata": {
        "id": "in5r9GjV52PI"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def dfa(t):\n",
        "  N = 1000 #bm size\n",
        "  data = np.random.normal(0, 1, N) #white noise\n",
        "  n = np.arange(5, int(np.ceil(N/10))) #array from 0 to N/10 of bm size\n",
        "  data = np.cumsum(data - np.mean(data)) #integrating white noise to obtain bm\n",
        "  F2_array = np.array([]) #array to save fluctuations\n",
        "  for s in n:\n",
        "    data1 = data[:N - N%s]\n",
        "    data2 = data[N%s:]\n",
        "    data1 = data1.reshape((-1, s))\n",
        "    data2 = data1.reshape((-1, s))\n",
        "    fits1 = np.polyfit(np.arange(s), data1.T, 1)\n",
        "    fits2 = np.polyfit(np.arange(s), data2.T, 1)\n",
        "    F2 = 0\n",
        "    ###TENTAR COLOCAR TODOS AS REGRESSÕES LINEARES EM UM ÚNICO ARRAY E SUBTRAIR\n",
        "    for i in range(int(N/s)):\n",
        "      p1 = np.poly1d(fits1[:, i])\n",
        "      p2 = np.poly1d(fits2[:, i])\n",
        "      y1 = data1[i] - p1(np.arange(s))\n",
        "      y2 = data2[i] - p2(np.arange(s))\n",
        "      plt.plot(p1(np.arange(s)))\n",
        "      plt.scatter(np.arange(s), data1[i])\n",
        "      plt.scatter(np.arange(s), y1)\n",
        "      plt.title(f'<x2> = {np.mean(y1**2)}')\n",
        "      plt.savefig(f'imagens/{s}_{i}.png')\n",
        "      plt.close()\n",
        "      F2 += np.mean(y1**2) + np.mean(y2**2)\n",
        "    F2_array = np.append(F2_array, np.sqrt(F2))\n",
        "  nplot = n[t:]\n",
        "  #print(len(n[t:]))\n",
        "  nF2 = F2_array[t:]\n",
        "  plt.scatter(np.log(nplot), np.log(nF2))\n",
        "  #slope, intercept, rvalue, pvalue, stderr = linregress(np.log(nplot), np.log(nF2))\n",
        "  #plt.ylabel('$log(F(s))$')\n",
        "  #plt.xlabel('log(s)')\n",
        "  #return np.log(nF2), np.log(nplot)"
      ],
      "metadata": {
        "id": "RJqrrwoH6-5k"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfa(0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "eHharoocX6sT",
        "outputId": "be931cf3-1615-432d-bb42-31488792eb67"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teste1 = np.ones(10)\n",
        "teste2 = np.ones(10)*2\n",
        "print(teste1, teste2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nCEgL6asnA67",
        "outputId": "06c99d84-4c12-424a-bbc9-916e927247ff"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] [2. 2. 2. 2. 2. 2. 2. 2. 2. 2.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6F9tSaPcDV5b"
      },
      "execution_count": 10,
      "outputs": []
    }
  ]
}